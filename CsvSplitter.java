// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package master.actions;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import master.proxies.TQ_FileDoc;
import system.proxies.FileDocument;

public class CsvSplitter extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __sourceFile;
	private system.proxies.FileDocument sourceFile;
	private java.lang.Long rowsPerFile;
	private java.lang.Long TotalRows;

	public CsvSplitter(IContext context, IMendixObject sourceFile, java.lang.Long rowsPerFile, java.lang.Long TotalRows)
	{
		super(context);
		this.__sourceFile = sourceFile;
		this.rowsPerFile = rowsPerFile;
		this.TotalRows = TotalRows;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.sourceFile = this.__sourceFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __sourceFile);

		// BEGIN USER CODE
        // Initialize resources
		InputStream inputStream = null;
        BufferedReader reader = null;
        List<IMendixObject> splitFiles = new ArrayList<>();
        int fileIndex = 0;
        int currentRow = 0;
        
        try {
            // Step 1: Get InputStream of the CSV file from FileDocument
            inputStream = Core.getFileDocumentContent(context(), sourceFile.getMendixObject());

            // Step 2: Use BufferedReader to read the CSV content
            reader = new BufferedReader(new InputStreamReader(inputStream));
            String row;
            List<String> chunkRows = new ArrayList<>();  // Buffer to store current chunk of rows

            // Step 3: Read and process the CSV file line by line without storing all rows in memory
            while ((row = reader.readLine()) != null) {
                chunkRows.add(row);  // Add the current row to the chunk
                currentRow++;

                // If the chunk reaches the desired size or it's the last line, save it to a file
                if (currentRow % rowsPerFile == 0 || currentRow == TotalRows.intValue()) {
                    fileIndex++;  // Increment file counter
                    // Step 4: Create a new FileDocument for each chunk of rows
                    FileDocument chunkFile = createFileDocument(context(), "Chunk_" + fileIndex + ".csv", chunkRows);
                    splitFiles.add(chunkFile.getMendixObject());  // Add the new file to the list
                    chunkRows.clear();  // Clear the chunk for the next set of rows

                    // Stop if the TotalRows limit is reached
                    if (currentRow >= TotalRows) {
                        break;
                    }
                }
            }
        } finally {
            // Step 5: Clean up resources and memory

            // Close the BufferedReader and InputStream
            if (reader != null) {
                try {
                    reader.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            // Optionally trigger garbage collection
            System.gc();  // Suggests garbage collection
        }

        // Return the list of split files as IMendixObject
        return splitFiles;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CsvSplitter";
	}

	// BEGIN EXTRA CODE
	private TQ_FileDoc createFileDocument(IContext context, String fileName, List<String> content) throws Exception {
        // Create a new FileDocument
		TQ_FileDoc fileDoc = new TQ_FileDoc(context);

        // Set the file name
        fileDoc.setName(context, fileName);

        // Commit the FileDocument to the database
        Core.commit(context, fileDoc.getMendixObject());

        // Convert List<String> content to InputStream
        String fileContent = String.join("\n", content);
        InputStream inputStream = new ByteArrayInputStream(fileContent.getBytes());

        // Store the content in the FileDocument using InputStream
        Core.storeFileDocumentContent(context, fileDoc.getMendixObject(), inputStream);
        inputStream.close();  // Close the InputStream after use

        // Return the FileDocument object
        return fileDoc;
	}
	// END EXTRA CODE
}
